#+begin_export latex
\section{Introduction}
Recombination is traditionally thought to speed up
adaptation~\cite{fis30:gen,mul32:som} and to eliminate deleterious
mutations from populations~\cite{mul64:rel}. It is therefore a
central mechanism of evolution and has been studied extensively by
theoreticians and experimentalists alike~\cite{ham01:nar}.
\ty{rush}, which stands for ``Recombination detection Using SHustrings'', is a program
for determining whether or not recombination has taken place during
the evolution of a pair of homologous DNA sequences. There are already
many programs available for doing this~\cite{pos02:eva,bru06:sim}. The
unique feature of \ty{rush} is that it analyzes unaligned
genomes. This makes the program fast.
\section{Getting Started}
\ty{rush} was written in C on a computer running Linux and should
work on any standard UNIX system.
However, please contact BH at \ty{haubold@evolbio.mpg.de} if you have
any problems with the program. We download \ty{rush}.
#+end_export
#+begin_src sh <<cli>>=
  git clone https://github.com/evolbioinf/rush
#+end_src
#+begin_export latex
This creates the directory \ty{rush}, and we change into it.
#+end_export
#+begin_src sh <<cli>>=
  cd rush
#+end_src
#+begin_export latex
Make \ty{rush}.
#+end_export
#+begin_src sh <<cli>>=
  make
#+end_src
#+begin_export latex
The directory \ty{bin} now contains the executable \ty{rush}. We list
its options.
#+end_export
#+begin_src sh <<cli>>=
  ./bin/rush -h
#+end_src
#+begin_export latex
\section{Tutorial}
To follow this Tutorial, the three programs listed in
Table~\ref{tab:dep} need to be installed on your system, in addition
to \ty{rush} itself.
\begin{table}
  \caption{Dependencies of this tutorial.}\label{tab:dep}
  \begin{center}
  \resizebox{\textwidth}{!}{
    \begin{tabular}{llll}
      \hline
      Program & Author & Source & Reference\\\hline
      \ty{ms} & R. R. Hudson & \ty{home.uchicago.edu/rhudson1/}
      & \cite{hud02:gen}\\
      \ty{ms2dna} & B. Haubold \& P. Pfaffelhuber & 
      \ty{https://github.com/evolbioinf/ms2dna/} & ---\\
      \ty{getSeq} & B. Haubold & \ty{github.com/evolbioinf/biobox} & ---\\
      \hline
    \end{tabular}
  }
\end{center}
\end{table}
We test \ty{rush}
#+end_export
#+begin_src sh <<cli>>=
  bash scripts/test.sh
#+end_src
#+begin_export latex
An example result is
\begin{verbatim}
Q 2.611e+00  D_r 5.426e+00  P 1.550e-08
\end{verbatim}
Yours will differ, because \ty{test.sh} generates random test sequences. In
the result, $Q=2.611$ is our recombination measure, $\dr=5.426$ the
test statistic, and $P=1.55\times 10^{-8}$ the error
probability when rejecting $H_0: \dr=0$.

Next, explore the rejection frequency as a function of the rate of recombination:
#+end_export
#+begin_src sh <<cli>>=
awk -f scripts/rush.awk
#+end_src
#+begin_export latex
Your results should look similar to
\begin{verbatim}
#rho	Rejection (alpha = 0.05)
0               0.02
1               0.15
2               0.2
4               0.33
8               0.39
16              0.61
32              0.73
64              0.85
128             0.96
256             0.95
512             0.98
1024            0.99
2048            0.98
4096            0.98
\end{verbatim}
Notice that you
can change the number of iterations in \ty{rush.awk} from 100 to some other value, say
200, by changing the line
\begin{verbatim}
it = 100
\end{verbatim}
to
\begin{verbatim}
it = 200
\end{verbatim}

To analyze some real data, we download two \emph{E. coli} genomes,
strain MG1655 with accession GCA\_032878995 and strain KO11FL with
accession GCA\_000258025.
#+end_export
#+begin_src sh <<cli>>=
  datasets download genome accession GCA_032878995 GCA_000258025
#+end_src
#+begin_export latex
We unzip the genomes.
#+end_export
#+begin_src sh <<cli>>=
  unzip ncbi_dataset.zip
#+end_src
#+begin_export latex
We link the genome sequences to more convenient names.
#+end_export
#+begin_src sh <<cli>>=
  ln -s ncbi*/data/GCA_03*/*.fna mg1655.fna
  ln -s ncbi*/data/GCA_00*/*.fna ko11fl.fna
#+end_src
#+begin_export latex
We run \ty{rush} on the two genomes and get a highly significant
recombination signal.
#+end_export
#+begin_src sh <<cli>>=
  rush -q mg1655.fna ko11fl.fna
#+end_src
#+begin_export latex
\begin{verbatim}
Q 3.352e+00  D_r 7.316e+01  P 0.000e+00
\end{verbatim}
#+end_export
#+begin_export latex
We can also run a sliding window analysis to measure the local
variation in recombination signal in 10\,kb windows. This gives
Figure~\ref{fig:win1}.
\begin{figure}
  \begin{center}
    \includegraphics{../intro/q1.ps}
  \end{center}
  \caption{Sliding window analysis (10\,kb) of the recombination signal, $Q$,
    when comparing the full genome sequences of two \emph{E. coli}
    strains, MG1655 as query and KO11FL as subject.}\label{fig:win1}
\end{figure}
#+end_export
#+begin_src sh <<cli>>=
  rush -w 10000 -q mg1655.fna ko11fl.fna > q1.dat
  cut -f 2,4 q1.dat |
      plotLine -x Position -y Q
#+end_src
#+begin_export latex
To get an intuition for the significance of these results, we
repeat the analysis with a randomized version of the subject sequence
to get Figure~\ref{fig:win2}, where the recombination signal hovers
around $6\times 10^{-3}$.
\begin{figure}
  \begin{center}
    \includegraphics{../intro/q2.ps}
  \end{center}
  \caption{Sliding window analysis (10\,kb) of the recombination signal, $Q$,
    when comparing a randomized version of \emph{E. coli} KO11FL as
    subject to query \emph{E. coli} MG1655.}\label{fig:win2}
\end{figure}
#+end_export
#+begin_src sh <<cli>>=
  randomizeSeq ko11fl.fna |
      rush  -q mg1655.fna -w 10000 > q2.dat
  cut -f 2,4 q2.dat |
      plotLine -x Position -y Q
#+end_src
#+begin_export latex
We can repeat the plot with the same y-axis as in the original plot in
Figure~\ref{fig:win1} to get Figure~\ref{fig:win3}, where it is clear
that the re is no recombination signal left.
\begin{figure}
  \begin{center}
    \includegraphics{../intro/q3.ps}
  \end{center}
  \caption{Sliding window analysis (10\,kb) of the recombination signal, $Q$,
    when comparing a randomized version of \emph{E. coli} KO11FL as
    subject to query \emph{E. coli} MG1655 with same y-axis as in the
    original analysis in Figure~\ref{fig:win1}.}\label{fig:win3}
\end{figure}
#+end_export
#+begin_src sh <<cli>>=
  cut -f 2,4 q2.dat |
      plotLine -x Position -y Q -Y "0:14"
#+end_src
#+begin_export latex
\section{Listings}
\subsection{Test Script \ty{test.sh}}
\lstinputlisting{../scripts/test.sh}
\subsection{Simulation Script \ty{rush.awk}}
\lstinputlisting{../scripts/rush.awk}
\lstset{language=c}
\subsection{Driver Program \ty{rush.c}}
\lstinputlisting{../rush/rush.c}
\subsection{Variance Computation \ty{varSd.c}}
\lstinputlisting{../rush/varSd.c}
\section{Change Log}
\bi
\I Version 0.1 (July 31, 2012)
\bi
\I Initial version.
\ei
\I Version 0.2 (August 3, 2012)
\bi
\I Cut out all superfluous code inherited from the computation of
$\pi_{\rm d}$; this made the program much faster.
\ei
\I Version 0.3 (August 25, 2012)
\bi
\I Implemented the option to include only shustrings of a minimum
length (\ty{-m}).
\ei
\I Version 0.4 (September 10, 2012)
\bi
\I Implemented Peter Pfaffelhuber's new formula for $pi_{\rm d}$ to
estimate $\pi$ if not supplied by user.
\ei
\I Version 0.5 (November 15, 2012)
\bi
\I Included the fast version of the full $pi_{\rm d}$ computation. The
minimum shustring length now becomes important.
\ei
\I Version 0.6 (November 16, 2012)
\bi
\I Adjusted computation of minimum shustring length to accommodate
GC-contents $\ne 1/2$.
\ei
\I Version 0.7 (November 17, 2012)
\bi
\I Exact computation of minimum shustring length; addition of \ty{-t}
option for determining the fraction of random shustring lengths ignored.
\ei
\I Version 0.8 (November 19, 2012)
\bi
\I  Mixed estimation of minimum shustring length: if the GC-content
deviates from 0.5 by more than \ty{-g}, explicit computation of
minimum shustring length is used; otherwise Section 4 of the Memo
dated August 28 2012 by Haubold, Horn, \& Pfaffelhuber is used.
\ei
\I Version 0.9 (November 23, 2012)
\bi
\I Fraction of rejected shustring lengths computed as a function of
sequence length.
\ei
\I Version 0.10 (November 29, 2012)
\bi
\I Implemented the new $R$-statistic.
\ei
\I Version 0.11 (December 6, 2012)
\bi
\I Sliding window analysis of $R$.
\ei
\I Version 0.12 (December 14, 2012)
\bi
\I Fixed error in sliding window analysis.
\ei
\I Version 0.13 (???)
\I Version 0.14 (January 28, 2013)
\bi
\I Implemented new hypothesis test.
\I Included significance computation.
\ei
\I Version 0.15 (January 29, 2013)
\bi
\I Abolished $R$.
\I Used $\ve=(1-\pi)/\pi^2$.
\I Caught negative expected variance in \ty{varSd.significanceVar}.
\ei
\I Version 0.16 (February 1, 2013)
\bi
\I Implemented extreme value distribution for hypothesis testing.
\ei
\I Version 0.17 (February 4, 2013)
\bi
\I Set negative expected variance to 0 in \ty{varSd.significanceVar}.g
\ei
\I Version 0.18 (February 8, 2013)
\bi
\I Implemented explicit error handling \cite[p. 18f]{gal05:gnu}.
\ei
\I Version 0.19 (February 12, 2013)
\bi
\I Reverted to Gaussian null distribution.
\I Implemented switch to test with log-transformed data.
\ei
\I Version 0.20 (March 8, 2013)
\bi
\I Removed memory leak in \ty{lcpTree.c} by replacing the increment of
\ty{maxNumLeaves} and \ty{maxNumChildren} by \ty{++} instead of
\ty{*2}.
\I Removed option for log-transformation.
\ei
\I Version 0.21 (April 10, 2013)
\bi
\I Switched from \ty{recTest} to \ty{rush}.
\ei
\I Version 1.0 (April 12, 2013)
\bi
\I First version released on web site.
\ei
\I Version 1.1 (April 19, 2013)
\bi
\I Implemented Peter's simplified expressions for $E[s^2]$ and $Var[s^2]$.
\ei
\I Version 1.2 (May 13, 2013)
\bi
\I Changed nomenclature in output from \verb+V_o+ and \verb+V_e+ to
\verb+s^2+ and \verb+X^2+.
\ei
\I Version 1.3 (May 17, 2013)
\bi
\I There was an error in the significance computation. Changed in
\ty{varS.c}
\begin{verbatim}
sig = gsl_sf_erfc(x);
\end{verbatim}
to
\begin{verbatim}
sig = gsl_cdf_ugaussian_Q(x);
\end{verbatim}
which is equivalent to 
\begin{verbatim}
sig =  gsl_sf_erfc(x/sqrt(2.))/2.;
\end{verbatim}
\I Asked the user for a query file in response to the \ty{-v} and
\ty{-h} options. Fixed.
\ei
\I Version 1.4 (August 15, 2013)
\bi
\I Changed the output to $Q$, $\dr$, and its significance.
\I If $\dr<0$, don't report significance values $<0.05$. Unfortunately,
if $\dr$ is only a bit greater than 0, \ty{rush} can report $P=0$ if
the sequences are very short (e.g. 1 kb):
\begin{verbatim}
for a in $(seq 100) 
   do generateQuerySbjct -l 1000 -s 10 -r 45
   ./rush -q query.fasta sbjct.fasta
done | grep 0.000
\end{verbatim}
I don't know how to fix
this, so I am leaving it as it is for now.
\ei
\I Version 1.5 (October 10, 2025)
\bi
\I Switched to git versioning.
\ei
\ei
#+end_export
